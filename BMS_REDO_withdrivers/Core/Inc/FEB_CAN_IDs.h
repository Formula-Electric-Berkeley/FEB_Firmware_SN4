/**
 * @file feb_can.h
 *
 * @brief This header file was generated by cantools version 40.2.1 Thu Mar 20 17:58:36 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef FEB_CAN_H
#define FEB_CAN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define FEB_CAN_BMS_STATE_FRAME_ID (0x00u)
#define FEB_CAN_BMS_CELL_DATA_FRAME_ID (0x01u)
#define FEB_CAN_BMS_ACCUMULATOR_VOLTAGE_FRAME_ID (0x02u)
#define FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_FRAME_ID (0x03u)
#define FEB_CAN_NORMALIZED_BRAKE_FRAME_ID (0x04u)
#define FEB_CAN_BSPD_STATE_FRAME_ID (0x05u)
#define FEB_CAN_DASH_MESSAGE_FRAME_ID (0x06u)
#define FEB_CAN_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_FRAME_ID (0x07u)
#define FEB_CAN_LVPDB_CP_AF_RF_SH_CURRENT_FRAME_ID (0x08u)
#define FEB_CAN_LVPDB_L_AS_AB_CURRENT_FRAME_ID (0x09u)
#define FEB_CAN_DART_TACH_MEASUREMENTS_1234_FRAME_ID (0x1eu)
#define FEB_CAN_DART_TACH_MEASUREMENTS_5_FRAME_ID (0x1fu)
#define FEB_CAN_RMS_PARAM_MSG_FRAME_ID (0xc0u)
#define FEB_CAN_RMS_COMMAND_MSG_FRAME_ID (0xc1u)
#define FEB_CAN_FEB_PING_PONG_COUNTER1_FRAME_ID (0xe0u)
#define FEB_CAN_FEB_PING_PONG_COUNTER2_FRAME_ID (0xe1u)
#define FEB_CAN_FEB_PING_PONG_COUNTER3_FRAME_ID (0xe2u)
#define FEB_CAN_FEB_PING_PONG_COUNTER4_FRAME_ID (0xe3u)

/* Frame lengths in bytes. */
#define FEB_CAN_BMS_STATE_LENGTH (2u)
#define FEB_CAN_BMS_CELL_DATA_LENGTH (8u)
#define FEB_CAN_BMS_ACCUMULATOR_VOLTAGE_LENGTH (8u)
#define FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_LENGTH (8u)
#define FEB_CAN_NORMALIZED_BRAKE_LENGTH (1u)
#define FEB_CAN_BSPD_STATE_LENGTH (1u)
#define FEB_CAN_DASH_MESSAGE_LENGTH (1u)
#define FEB_CAN_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_LENGTH (8u)
#define FEB_CAN_LVPDB_CP_AF_RF_SH_CURRENT_LENGTH (8u)
#define FEB_CAN_LVPDB_L_AS_AB_CURRENT_LENGTH (8u)
#define FEB_CAN_DART_TACH_MEASUREMENTS_1234_LENGTH (8u)
#define FEB_CAN_DART_TACH_MEASUREMENTS_5_LENGTH (2u)
#define FEB_CAN_RMS_PARAM_MSG_LENGTH (8u)
#define FEB_CAN_RMS_COMMAND_MSG_LENGTH (8u)
#define FEB_CAN_FEB_PING_PONG_COUNTER1_LENGTH (8u)
#define FEB_CAN_FEB_PING_PONG_COUNTER2_LENGTH (8u)
#define FEB_CAN_FEB_PING_PONG_COUNTER3_LENGTH (8u)
#define FEB_CAN_FEB_PING_PONG_COUNTER4_LENGTH (8u)

/* Extended or standard frame types. */
#define FEB_CAN_BMS_STATE_IS_EXTENDED (0)
#define FEB_CAN_BMS_CELL_DATA_IS_EXTENDED (0)
#define FEB_CAN_BMS_ACCUMULATOR_VOLTAGE_IS_EXTENDED (0)
#define FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_IS_EXTENDED (0)
#define FEB_CAN_NORMALIZED_BRAKE_IS_EXTENDED (0)
#define FEB_CAN_BSPD_STATE_IS_EXTENDED (0)
#define FEB_CAN_DASH_MESSAGE_IS_EXTENDED (0)
#define FEB_CAN_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_IS_EXTENDED (0)
#define FEB_CAN_LVPDB_CP_AF_RF_SH_CURRENT_IS_EXTENDED (0)
#define FEB_CAN_LVPDB_L_AS_AB_CURRENT_IS_EXTENDED (0)
#define FEB_CAN_DART_TACH_MEASUREMENTS_1234_IS_EXTENDED (0)
#define FEB_CAN_DART_TACH_MEASUREMENTS_5_IS_EXTENDED (0)
#define FEB_CAN_RMS_PARAM_MSG_IS_EXTENDED (0)
#define FEB_CAN_RMS_COMMAND_MSG_IS_EXTENDED (0)
#define FEB_CAN_FEB_PING_PONG_COUNTER1_IS_EXTENDED (0)
#define FEB_CAN_FEB_PING_PONG_COUNTER2_IS_EXTENDED (0)
#define FEB_CAN_FEB_PING_PONG_COUNTER3_IS_EXTENDED (0)
#define FEB_CAN_FEB_PING_PONG_COUNTER4_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define FEB_CAN_BMS_STATE_NAME "BMS_State"
#define FEB_CAN_BMS_CELL_DATA_NAME "BMS_Cell_Data"
#define FEB_CAN_BMS_ACCUMULATOR_VOLTAGE_NAME "BMS_Accumulator_Voltage"
#define FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_NAME "BMS_Accumulator_Temperature"
#define FEB_CAN_NORMALIZED_BRAKE_NAME "normalized_brake"
#define FEB_CAN_BSPD_STATE_NAME "BSPD_State"
#define FEB_CAN_DASH_MESSAGE_NAME "Dash_Message"
#define FEB_CAN_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_NAME "LVPDB_Flags_Bus_Voltage_LV_Current"
#define FEB_CAN_LVPDB_CP_AF_RF_SH_CURRENT_NAME "LVPDB_CP_AF_RF_SH_Current"
#define FEB_CAN_LVPDB_L_AS_AB_CURRENT_NAME "LVPDB_L_AS_AB_Current"
#define FEB_CAN_DART_TACH_MEASUREMENTS_1234_NAME "DART_TACH_measurements_1234"
#define FEB_CAN_DART_TACH_MEASUREMENTS_5_NAME "DART_TACH_measurements_5"
#define FEB_CAN_RMS_PARAM_MSG_NAME "rms_param_msg"
#define FEB_CAN_RMS_COMMAND_MSG_NAME "rms_command_msg"
#define FEB_CAN_FEB_PING_PONG_COUNTER1_NAME "FEB_PING_PONG_counter1"
#define FEB_CAN_FEB_PING_PONG_COUNTER2_NAME "FEB_PING_PONG_counter2"
#define FEB_CAN_FEB_PING_PONG_COUNTER3_NAME "FEB_PING_PONG_counter3"
#define FEB_CAN_FEB_PING_PONG_COUNTER4_NAME "FEB_PING_PONG_counter4"

/* Signal Names. */
#define FEB_CAN_BMS_STATE_BMS_STATE_NAME "bms_state"
#define FEB_CAN_BMS_STATE_PING_ALIVE_NAME "ping_alive"
#define FEB_CAN_BMS_STATE_RELAY_STATE_NAME "relay_state"
#define FEB_CAN_BMS_STATE_GPIO_SENSE_NAME "gpio_sense"
#define FEB_CAN_BMS_CELL_DATA_BMS_FLAGS_NAME "bms_flags"
#define FEB_CAN_BMS_CELL_DATA_BMS_CELL_NAME "bms_cell"
#define FEB_CAN_BMS_CELL_DATA_BMS_BANK_NAME "bms_bank"
#define FEB_CAN_BMS_CELL_DATA_BMS_VOLTAGE_NAME "bms_voltage"
#define FEB_CAN_BMS_CELL_DATA_BMS_TEMPERATURE_NAME "bms_temperature"
#define FEB_CAN_BMS_CELL_DATA_BMS_SEND_TIME_NAME "bms_send_time"
#define FEB_CAN_BMS_ACCUMULATOR_VOLTAGE_TOTAL_PACK_VOLTAGE_NAME "total_pack_voltage"
#define FEB_CAN_BMS_ACCUMULATOR_VOLTAGE_MIN_CELL_VOLTAGE_NAME "min_cell_voltage"
#define FEB_CAN_BMS_ACCUMULATOR_VOLTAGE_MAX_CELL_VOLTAGE_NAME "max_cell_voltage"
#define FEB_CAN_BMS_ACCUMULATOR_VOLTAGE_SEND_TIME_NAME "send_time"
#define FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_AVERAGE_PACK_TEMPERATURE_NAME "average_pack_temperature"
#define FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_MIN_CELL_TEMPERATURE_NAME "min_cell_temperature"
#define FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_MAX_CELL_TEMPERATURE_NAME "max_cell_temperature"
#define FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_SEND_TIME_NAME "send_time"
#define FEB_CAN_NORMALIZED_BRAKE_NORMALIZED_BRAKE_NAME "normalized_brake"
#define FEB_CAN_BSPD_STATE_BSPD_STATE_NAME "bspd_state"
#define FEB_CAN_DASH_MESSAGE_BUZZER_STATE_NAME "buzzer_state"
#define FEB_CAN_DASH_MESSAGE_BUTTON1_READY_TO_DRIVE_NAME "button1_ready_to_drive"
#define FEB_CAN_DASH_MESSAGE_BUTTON2_NAME "button2"
#define FEB_CAN_DASH_MESSAGE_BUTTON3_NAME "button3"
#define FEB_CAN_DASH_MESSAGE_BUTTON4_NAME "button4"
#define FEB_CAN_DASH_MESSAGE_COOLANT_PUMP_SWITCH_NAME "coolant_pump_switch"
#define FEB_CAN_DASH_MESSAGE_RADIATOR_FAN_SWITCH_NAME "radiator_fan_switch"
#define FEB_CAN_DASH_MESSAGE_ACCUMULATOR_FAN_SWITCH_NAME "accumulator_fan_switch"
#define FEB_CAN_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_FLAGS_NAME "flags"
#define FEB_CAN_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_BUS_VOLTAGE_NAME "bus_voltage"
#define FEB_CAN_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_LV_CURRENT_NAME "lv_current"
#define FEB_CAN_LVPDB_CP_AF_RF_SH_CURRENT_CP_CURRENT_NAME "cp_current"
#define FEB_CAN_LVPDB_CP_AF_RF_SH_CURRENT_AF_CURRENT_NAME "af_current"
#define FEB_CAN_LVPDB_CP_AF_RF_SH_CURRENT_RF_CURRENT_NAME "rf_current"
#define FEB_CAN_LVPDB_CP_AF_RF_SH_CURRENT_SH_VOLTAGE_NAME "sh_voltage"
#define FEB_CAN_LVPDB_L_AS_AB_CURRENT_L_CURRENT_NAME "l_current"
#define FEB_CAN_LVPDB_L_AS_AB_CURRENT_AS_VOLTAGE_NAME "as_voltage"
#define FEB_CAN_LVPDB_L_AS_AB_CURRENT_AB_VOLTAGE_NAME "ab_voltage"
#define FEB_CAN_DART_TACH_MEASUREMENTS_1234_FAN1_SPEED_NAME "fan1_speed"
#define FEB_CAN_DART_TACH_MEASUREMENTS_1234_FAN2_SPEED_NAME "fan2_speed"
#define FEB_CAN_DART_TACH_MEASUREMENTS_1234_FAN3_SPEED_NAME "fan3_speed"
#define FEB_CAN_DART_TACH_MEASUREMENTS_1234_FAN4_SPEED_NAME "fan4_speed"
#define FEB_CAN_DART_TACH_MEASUREMENTS_5_FAN5_SPEED_NAME "fan5_speed"
#define FEB_CAN_RMS_PARAM_MSG_ADDRESS_NAME "address"
#define FEB_CAN_RMS_PARAM_MSG_READ_WRITE_COMMAND_NAME "read_write_command"
#define FEB_CAN_RMS_PARAM_MSG_DATA_NAME "data"
#define FEB_CAN_RMS_COMMAND_MSG_TORQUE_SIGNAL_SMALL_NAME "torque_signal_small"
#define FEB_CAN_RMS_COMMAND_MSG_SPEED_SIGNAL_NAME "speed_signal"
#define FEB_CAN_RMS_COMMAND_MSG_DIRECTION_VALUE_NAME "direction_value"
#define FEB_CAN_RMS_COMMAND_MSG_INVERTER_ENABLE_NAME "inverter_enable"
#define FEB_CAN_RMS_COMMAND_MSG_INVERTER_DICHARGE_NAME "inverter_dicharge"
#define FEB_CAN_RMS_COMMAND_MSG_SPEED_MODE_ENABLED_NAME "speed_mode_enabled"
#define FEB_CAN_RMS_COMMAND_MSG_COMMAND_TORQUE_LIMITED_NAME "command_torque_limited"
#define FEB_CAN_FEB_PING_PONG_COUNTER1_COUNTER_NAME "counter"
#define FEB_CAN_FEB_PING_PONG_COUNTER2_COUNTER_NAME "counter"
#define FEB_CAN_FEB_PING_PONG_COUNTER3_COUNTER_NAME "counter"
#define FEB_CAN_FEB_PING_PONG_COUNTER4_COUNTER_NAME "counter"

/**
 * Signals in message BMS_State.
 *
 * BMS message for BMS state.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_bms_state_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ping_alive;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t relay_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gpio_sense;
};

/**
 * Signals in message BMS_Cell_Data.
 *
 * BMS message for cell data.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_bms_cell_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_flags;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bank;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_send_time;
};

/**
 * Signals in message BMS_Accumulator_Voltage.
 *
 * BMS message for accumulator voltage.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_bms_accumulator_voltage_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t total_pack_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t min_cell_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t max_cell_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t send_time;
};

/**
 * Signals in message BMS_Accumulator_Temperature.
 *
 * BMS message for accumulator temperature.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_bms_accumulator_temperature_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t average_pack_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t min_cell_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t max_cell_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t send_time;
};

/**
 * Signals in message normalized_brake.
 *
 * PCU normalized brake message
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_normalized_brake_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t normalized_brake;
};

/**
 * Signals in message BSPD_State.
 *
 * BSPD message.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_bspd_state_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bspd_state;
};

/**
 * Signals in message Dash_Message.
 *
 * Dash message
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_dash_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t buzzer_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t button1_ready_to_drive;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t button2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t button3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t button4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t coolant_pump_switch;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t radiator_fan_switch;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t accumulator_fan_switch;
};

/**
 * Signals in message LVPDB_Flags_Bus_Voltage_LV_Current.
 *
 * LVPDB message for flags, bus voltage, LV current.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_lvpdb_flags_bus_voltage_lv_current_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t flags;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bus_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t lv_current;
};

/**
 * Signals in message LVPDB_CP_AF_RF_SH_Current.
 *
 * LVPDB message for Coolant Pump Current, Accumulator Fans, Radiator Fans, Shutdown Source.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_lvpdb_cp_af_rf_sh_current_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cp_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t af_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t rf_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sh_voltage;
};

/**
 * Signals in message LVPDB_L_AS_AB_Current.
 *
 * LVPDB message for .
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_lvpdb_l_as_ab_current_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t l_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t as_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ab_voltage;
};

/**
 * Signals in message DART_TACH_measurements_1234.
 *
 * DART message for Tachometer measurements first 4 fan speeds.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_dart_tach_measurements_1234_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fan1_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fan2_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fan3_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fan4_speed;
};

/**
 * Signals in message DART_TACH_measurements_5.
 *
 * DART message for Tachometer measurements 5th fan speed.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_dart_tach_measurements_5_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fan5_speed;
};

/**
 * Signals in message rms_param_msg.
 *
 * param_message.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_rms_param_msg_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t read_write_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t data;
};

/**
 * Signals in message rms_command_msg.
 *
 * RMS command message.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_rms_command_msg_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_signal_small;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_signal;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_value;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_enable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_dicharge;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_mode_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t command_torque_limited;
};

/**
 * Signals in message FEB_PING_PONG_counter1.
 *
 * PING PONG counter1.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_feb_ping_pong_counter1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t counter;
};

/**
 * Signals in message FEB_PING_PONG_counter2.
 *
 * PING PONG counter2.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_feb_ping_pong_counter2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t counter;
};

/**
 * Signals in message FEB_PING_PONG_counter3.
 *
 * PING PONG counter3.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_feb_ping_pong_counter3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t counter;
};

/**
 * Signals in message FEB_PING_PONG_counter4.
 *
 * PING PONG counter4.
 *
 * All signal values are as on the CAN bus.
 */
struct feb_can_feb_ping_pong_counter4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t counter;
};

/**
 * Pack message BMS_State.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_bms_state_pack(
    uint8_t *dst_p,
    const struct feb_can_bms_state_t *src_p,
    size_t size);

/**
 * Unpack message BMS_State.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_bms_state_unpack(
    struct feb_can_bms_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_State.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_bms_state_init(struct feb_can_bms_state_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_bms_state_bms_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_state_bms_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_state_bms_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_bms_state_ping_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_state_ping_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_state_ping_alive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_bms_state_relay_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_state_relay_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_state_relay_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_bms_state_gpio_sense_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_state_gpio_sense_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_state_gpio_sense_is_in_range(uint8_t value);

/**
 * Pack message BMS_Cell_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_bms_cell_data_pack(
    uint8_t *dst_p,
    const struct feb_can_bms_cell_data_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Cell_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_bms_cell_data_unpack(
    struct feb_can_bms_cell_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Cell_Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_bms_cell_data_init(struct feb_can_bms_cell_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_bms_cell_data_bms_flags_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_cell_data_bms_flags_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_cell_data_bms_flags_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_bms_cell_data_bms_cell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_cell_data_bms_cell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_cell_data_bms_cell_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_bms_cell_data_bms_bank_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_cell_data_bms_bank_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_cell_data_bms_bank_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_cell_data_bms_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_cell_data_bms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_cell_data_bms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_cell_data_bms_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_cell_data_bms_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_cell_data_bms_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_cell_data_bms_send_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_cell_data_bms_send_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_cell_data_bms_send_time_is_in_range(uint16_t value);

/**
 * Pack message BMS_Accumulator_Voltage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_bms_accumulator_voltage_pack(
    uint8_t *dst_p,
    const struct feb_can_bms_accumulator_voltage_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Accumulator_Voltage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_bms_accumulator_voltage_unpack(
    struct feb_can_bms_accumulator_voltage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Accumulator_Voltage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_bms_accumulator_voltage_init(struct feb_can_bms_accumulator_voltage_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_accumulator_voltage_total_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_accumulator_voltage_total_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_accumulator_voltage_total_pack_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_accumulator_voltage_min_cell_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_accumulator_voltage_min_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_accumulator_voltage_min_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_accumulator_voltage_max_cell_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_accumulator_voltage_max_cell_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_accumulator_voltage_max_cell_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_accumulator_voltage_send_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_accumulator_voltage_send_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_accumulator_voltage_send_time_is_in_range(uint16_t value);

/**
 * Pack message BMS_Accumulator_Temperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_bms_accumulator_temperature_pack(
    uint8_t *dst_p,
    const struct feb_can_bms_accumulator_temperature_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Accumulator_Temperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_bms_accumulator_temperature_unpack(
    struct feb_can_bms_accumulator_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Accumulator_Temperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_bms_accumulator_temperature_init(struct feb_can_bms_accumulator_temperature_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_accumulator_temperature_average_pack_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_accumulator_temperature_average_pack_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_accumulator_temperature_average_pack_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_accumulator_temperature_min_cell_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_accumulator_temperature_min_cell_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_accumulator_temperature_min_cell_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_accumulator_temperature_max_cell_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_accumulator_temperature_max_cell_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_accumulator_temperature_max_cell_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_bms_accumulator_temperature_send_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bms_accumulator_temperature_send_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bms_accumulator_temperature_send_time_is_in_range(uint16_t value);

/**
 * Pack message normalized_brake.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_normalized_brake_pack(
    uint8_t *dst_p,
    const struct feb_can_normalized_brake_t *src_p,
    size_t size);

/**
 * Unpack message normalized_brake.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_normalized_brake_unpack(
    struct feb_can_normalized_brake_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from normalized_brake.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_normalized_brake_init(struct feb_can_normalized_brake_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_normalized_brake_normalized_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_normalized_brake_normalized_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_normalized_brake_normalized_brake_is_in_range(uint8_t value);

/**
 * Pack message BSPD_State.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_bspd_state_pack(
    uint8_t *dst_p,
    const struct feb_can_bspd_state_t *src_p,
    size_t size);

/**
 * Unpack message BSPD_State.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_bspd_state_unpack(
    struct feb_can_bspd_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BSPD_State.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_bspd_state_init(struct feb_can_bspd_state_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_bspd_state_bspd_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_bspd_state_bspd_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_bspd_state_bspd_state_is_in_range(uint8_t value);

/**
 * Pack message Dash_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_dash_message_pack(
    uint8_t *dst_p,
    const struct feb_can_dash_message_t *src_p,
    size_t size);

/**
 * Unpack message Dash_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_dash_message_unpack(
    struct feb_can_dash_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Dash_Message.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_dash_message_init(struct feb_can_dash_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_dash_message_buzzer_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dash_message_buzzer_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dash_message_buzzer_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_dash_message_button1_ready_to_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dash_message_button1_ready_to_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dash_message_button1_ready_to_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_dash_message_button2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dash_message_button2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dash_message_button2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_dash_message_button3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dash_message_button3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dash_message_button3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_dash_message_button4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dash_message_button4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dash_message_button4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_dash_message_coolant_pump_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dash_message_coolant_pump_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dash_message_coolant_pump_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_dash_message_radiator_fan_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dash_message_radiator_fan_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dash_message_radiator_fan_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_dash_message_accumulator_fan_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dash_message_accumulator_fan_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dash_message_accumulator_fan_switch_is_in_range(uint8_t value);

/**
 * Pack message LVPDB_Flags_Bus_Voltage_LV_Current.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_lvpdb_flags_bus_voltage_lv_current_pack(
    uint8_t *dst_p,
    const struct feb_can_lvpdb_flags_bus_voltage_lv_current_t *src_p,
    size_t size);

/**
 * Unpack message LVPDB_Flags_Bus_Voltage_LV_Current.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_lvpdb_flags_bus_voltage_lv_current_unpack(
    struct feb_can_lvpdb_flags_bus_voltage_lv_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LVPDB_Flags_Bus_Voltage_LV_Current.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_lvpdb_flags_bus_voltage_lv_current_init(struct feb_can_lvpdb_flags_bus_voltage_lv_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t feb_can_lvpdb_flags_bus_voltage_lv_current_flags_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_flags_bus_voltage_lv_current_flags_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_flags_bus_voltage_lv_current_flags_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_flags_bus_voltage_lv_current_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_flags_bus_voltage_lv_current_bus_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_flags_bus_voltage_lv_current_bus_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_flags_bus_voltage_lv_current_lv_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_flags_bus_voltage_lv_current_lv_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_flags_bus_voltage_lv_current_lv_current_is_in_range(uint16_t value);

/**
 * Pack message LVPDB_CP_AF_RF_SH_Current.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_lvpdb_cp_af_rf_sh_current_pack(
    uint8_t *dst_p,
    const struct feb_can_lvpdb_cp_af_rf_sh_current_t *src_p,
    size_t size);

/**
 * Unpack message LVPDB_CP_AF_RF_SH_Current.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_lvpdb_cp_af_rf_sh_current_unpack(
    struct feb_can_lvpdb_cp_af_rf_sh_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LVPDB_CP_AF_RF_SH_Current.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_lvpdb_cp_af_rf_sh_current_init(struct feb_can_lvpdb_cp_af_rf_sh_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_cp_af_rf_sh_current_cp_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_cp_af_rf_sh_current_cp_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_cp_af_rf_sh_current_cp_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_cp_af_rf_sh_current_af_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_cp_af_rf_sh_current_af_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_cp_af_rf_sh_current_af_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_cp_af_rf_sh_current_rf_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_cp_af_rf_sh_current_rf_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_cp_af_rf_sh_current_rf_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_cp_af_rf_sh_current_sh_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_cp_af_rf_sh_current_sh_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_cp_af_rf_sh_current_sh_voltage_is_in_range(uint16_t value);

/**
 * Pack message LVPDB_L_AS_AB_Current.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_lvpdb_l_as_ab_current_pack(
    uint8_t *dst_p,
    const struct feb_can_lvpdb_l_as_ab_current_t *src_p,
    size_t size);

/**
 * Unpack message LVPDB_L_AS_AB_Current.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_lvpdb_l_as_ab_current_unpack(
    struct feb_can_lvpdb_l_as_ab_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LVPDB_L_AS_AB_Current.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_lvpdb_l_as_ab_current_init(struct feb_can_lvpdb_l_as_ab_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_l_as_ab_current_l_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_l_as_ab_current_l_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_l_as_ab_current_l_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_l_as_ab_current_as_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_l_as_ab_current_as_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_l_as_ab_current_as_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_lvpdb_l_as_ab_current_ab_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_lvpdb_l_as_ab_current_ab_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_lvpdb_l_as_ab_current_ab_voltage_is_in_range(uint16_t value);

/**
 * Pack message DART_TACH_measurements_1234.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_dart_tach_measurements_1234_pack(
    uint8_t *dst_p,
    const struct feb_can_dart_tach_measurements_1234_t *src_p,
    size_t size);

/**
 * Unpack message DART_TACH_measurements_1234.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_dart_tach_measurements_1234_unpack(
    struct feb_can_dart_tach_measurements_1234_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DART_TACH_measurements_1234.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_dart_tach_measurements_1234_init(struct feb_can_dart_tach_measurements_1234_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_dart_tach_measurements_1234_fan1_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dart_tach_measurements_1234_fan1_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dart_tach_measurements_1234_fan1_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_dart_tach_measurements_1234_fan2_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dart_tach_measurements_1234_fan2_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dart_tach_measurements_1234_fan2_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_dart_tach_measurements_1234_fan3_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dart_tach_measurements_1234_fan3_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dart_tach_measurements_1234_fan3_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_dart_tach_measurements_1234_fan4_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dart_tach_measurements_1234_fan4_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dart_tach_measurements_1234_fan4_speed_is_in_range(uint16_t value);

/**
 * Pack message DART_TACH_measurements_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_dart_tach_measurements_5_pack(
    uint8_t *dst_p,
    const struct feb_can_dart_tach_measurements_5_t *src_p,
    size_t size);

/**
 * Unpack message DART_TACH_measurements_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_dart_tach_measurements_5_unpack(
    struct feb_can_dart_tach_measurements_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DART_TACH_measurements_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_dart_tach_measurements_5_init(struct feb_can_dart_tach_measurements_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_dart_tach_measurements_5_fan5_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_dart_tach_measurements_5_fan5_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_dart_tach_measurements_5_fan5_speed_is_in_range(uint16_t value);

/**
 * Pack message rms_param_msg.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_rms_param_msg_pack(
    uint8_t *dst_p,
    const struct feb_can_rms_param_msg_t *src_p,
    size_t size);

/**
 * Unpack message rms_param_msg.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_rms_param_msg_unpack(
    struct feb_can_rms_param_msg_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from rms_param_msg.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_rms_param_msg_init(struct feb_can_rms_param_msg_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_rms_param_msg_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_param_msg_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_param_msg_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_rms_param_msg_read_write_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_param_msg_read_write_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_param_msg_read_write_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_rms_param_msg_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_param_msg_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_param_msg_data_is_in_range(uint16_t value);

/**
 * Pack message rms_command_msg.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_rms_command_msg_pack(
    uint8_t *dst_p,
    const struct feb_can_rms_command_msg_t *src_p,
    size_t size);

/**
 * Unpack message rms_command_msg.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_rms_command_msg_unpack(
    struct feb_can_rms_command_msg_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from rms_command_msg.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_rms_command_msg_init(struct feb_can_rms_command_msg_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_rms_command_msg_torque_signal_small_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_command_msg_torque_signal_small_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_command_msg_torque_signal_small_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_rms_command_msg_speed_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_command_msg_speed_signal_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_command_msg_speed_signal_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_rms_command_msg_direction_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_command_msg_direction_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_command_msg_direction_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_rms_command_msg_inverter_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_command_msg_inverter_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_command_msg_inverter_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_rms_command_msg_inverter_dicharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_command_msg_inverter_dicharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_command_msg_inverter_dicharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t feb_can_rms_command_msg_speed_mode_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_command_msg_speed_mode_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_command_msg_speed_mode_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t feb_can_rms_command_msg_command_torque_limited_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_rms_command_msg_command_torque_limited_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_rms_command_msg_command_torque_limited_is_in_range(uint16_t value);

/**
 * Pack message FEB_PING_PONG_counter1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_feb_ping_pong_counter1_pack(
    uint8_t *dst_p,
    const struct feb_can_feb_ping_pong_counter1_t *src_p,
    size_t size);

/**
 * Unpack message FEB_PING_PONG_counter1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_feb_ping_pong_counter1_unpack(
    struct feb_can_feb_ping_pong_counter1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FEB_PING_PONG_counter1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_feb_ping_pong_counter1_init(struct feb_can_feb_ping_pong_counter1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t feb_can_feb_ping_pong_counter1_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_feb_ping_pong_counter1_counter_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_feb_ping_pong_counter1_counter_is_in_range(int32_t value);

/**
 * Pack message FEB_PING_PONG_counter2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_feb_ping_pong_counter2_pack(
    uint8_t *dst_p,
    const struct feb_can_feb_ping_pong_counter2_t *src_p,
    size_t size);

/**
 * Unpack message FEB_PING_PONG_counter2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_feb_ping_pong_counter2_unpack(
    struct feb_can_feb_ping_pong_counter2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FEB_PING_PONG_counter2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_feb_ping_pong_counter2_init(struct feb_can_feb_ping_pong_counter2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t feb_can_feb_ping_pong_counter2_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_feb_ping_pong_counter2_counter_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_feb_ping_pong_counter2_counter_is_in_range(int32_t value);

/**
 * Pack message FEB_PING_PONG_counter3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_feb_ping_pong_counter3_pack(
    uint8_t *dst_p,
    const struct feb_can_feb_ping_pong_counter3_t *src_p,
    size_t size);

/**
 * Unpack message FEB_PING_PONG_counter3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_feb_ping_pong_counter3_unpack(
    struct feb_can_feb_ping_pong_counter3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FEB_PING_PONG_counter3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_feb_ping_pong_counter3_init(struct feb_can_feb_ping_pong_counter3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t feb_can_feb_ping_pong_counter3_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_feb_ping_pong_counter3_counter_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_feb_ping_pong_counter3_counter_is_in_range(int32_t value);

/**
 * Pack message FEB_PING_PONG_counter4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int feb_can_feb_ping_pong_counter4_pack(
    uint8_t *dst_p,
    const struct feb_can_feb_ping_pong_counter4_t *src_p,
    size_t size);

/**
 * Unpack message FEB_PING_PONG_counter4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int feb_can_feb_ping_pong_counter4_unpack(
    struct feb_can_feb_ping_pong_counter4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FEB_PING_PONG_counter4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int feb_can_feb_ping_pong_counter4_init(struct feb_can_feb_ping_pong_counter4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t feb_can_feb_ping_pong_counter4_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double feb_can_feb_ping_pong_counter4_counter_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool feb_can_feb_ping_pong_counter4_counter_is_in_range(int32_t value);


#ifdef __cplusplus
}
#endif

#endif
